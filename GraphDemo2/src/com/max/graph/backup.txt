public boolean solveHamiltonianCycle(int select) {
		if (findEdge(tours.get(tours.size() - 1), tours.get(0))
				&& pathCount == num_verteces - 1) {
			System.out.println("Found Solution!!");
			return true;
		}
		if (pathCount == num_verteces - 1 || pathCount < 0) {
			return false;
		}

		Vertex current = tours.get(pathCount);

		while (!visited.isEmpty()) {
			List<Vertex> adjcents = new ArrayList<Vertex>();
			List<Edge> adjEdges = current.edges;
			for (int i = 0; i < adjEdges.size(); i++) {
				adjcents.add(adjEdges.get(i).getDestination());
			}
			double alpha = 1.0;
			double beta = 2.0;
			double sum = 0.0;
			double[] p;
			p = new double[adjcents.size()];
			// Ant select city by probability
			for (int i = 0; i < adjcents.size(); i++) {
				if (!visited.contains(adjcents.get(i))) {
					sum += Math.pow(adjEdges.get(i).getPheromoneLevel(), alpha)
							* Math.pow(1.0 / adjEdges.get(i).getWeight(), beta);
				}
			}
			for (int i = 0; i < adjcents.size(); i++) {
				if (visited.contains(adjcents.get(i))) {
					p[i] = 0;
				} else {
					p[i] = (Math
							.pow(adjEdges.get(i).getPheromoneLevel(), alpha) * Math
							.pow(1.0 / adjEdges.get(i).getWeight(), beta))
							/ sum;
				}
			}
			Random random = new Random(System.currentTimeMillis());
			float sleectP = random.nextFloat();
			int selectcity = -1;
			float sum1 = 0.f;
			for (int i = 0; i < adjcents.size(); i++) {
				sum1 += p[i];
				if (sum1 >= sleectP) {
					selectcity = i;
					break;
				}
			}
			if (selectcity == -1) {
				for (Edge e : tours.get(pathCount).edges) {
					if (visited.contains(e.getSource())) {
						visited.remove(e.getSource());
						tours.remove(e.getSource());
						pathCount--;
					}
					if (visited.contains(e.getDestination())) {
						visited.remove(e.getDestination());
						tours.remove(e.getDestination());
						pathCount--;
					}

				}

				// restore connections
				if (pathCount > 0) {
					visited.remove(tours.get(pathCount));
					tours.remove(pathCount);
					pathCount--;
					current = tours.get(pathCount);
				}

			} else {
				pathCount++;
				tours.add(adjcents.get(selectcity));
				visited.add(adjcents.get(selectcity));

				if (solveHamiltonianCycle(pathCount)) {
					return true;
				}
			}
		}

		return false;

	}
